//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.4

use sea_orm::{entity::prelude::*, Set};
use async_graphql::SimpleObject;
use serde::{Deserialize, Serialize};
use chrono::Utc;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Deserialize, Serialize, SimpleObject)]
#[sea_orm(table_name = "stock_order_entity")]
#[graphql(name = "StockOrderEntity")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub symbol: String,
    #[sea_orm(column_type = "Float")]
    pub bid_price: f32,
    pub bid_size: i32,
    pub order_type: String,
    pub created_at: DateTime,
    pub deleted_at: Option<DateTime>,
}

pub type StockOrderEntity = Model;

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {
    fn new() -> Self {
        Self {
            id: Set(Uuid::new_v4()),
            ..ActiveModelTrait::default()
        }
    }
}

impl Model {
    pub fn new(symbol: String, bid_price: f32, bid_size: i32, order_type: String) -> Self {
        let utc_now = Utc::now();
        let now = utc_now.naive_utc();

        Self {
            id: Uuid::new_v4(),
            symbol,
            bid_price,
            bid_size,
            order_type,
            created_at: now,
            deleted_at: Option::None,
        }
    }

    pub fn into_active_model(&self) -> ActiveModel {
        ActiveModel {
            id: Set(self.id.to_owned()),
            symbol: Set(self.symbol.to_owned()),
            bid_price: Set(self.bid_price.to_owned()),
            bid_size: Set(self.bid_size.to_owned()),
            order_type: Set(self.order_type.to_owned()),
            created_at: Set(self.created_at.to_owned()),
            deleted_at: Set(self.deleted_at.to_owned()),
        }
    }
}
